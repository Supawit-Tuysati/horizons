import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Helmet } from "react-helmet";
import Layout from "@/components/Layout";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/components/ui/use-toast";
import { useNavigate } from "react-router-dom";
import {
  Clock,
  Calendar,
  MapPin,
  Coffee,
  Home,
  Building2,
  TrendingUp,
  Users,
  CheckCircle,
} from "lucide-react";
import { getTimeWorkToDay } from "../api/time";
import { useAuth } from "../contexts/AuthContext";

const Dashboard = () => {
  const navigate = useNavigate();
  const [currentTime, setCurrentTime] = useState(new Date());
  const { workStatus } = useState("offline");
  const { toast } = useToast();
  const { user } = useAuth();
  const [entries, setEntries] = useState([]);
  const [todayHours, setTodayHours] = useState("0.00 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á");

  const handleQuickAction = (system_status, action) => {
    if (system_status === "develop") {
      toast({
        title: "üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤",
        description:
          "‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏á‡∏ß‡∏•! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ! üöÄ",
      });
    } else {
      navigate(action);
    }
  };

  useEffect(() => {
    const clockTimer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(clockTimer);
  }, []);

  const calculateWorkTime = (entries) => {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ entries
    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
    let checkIn = null; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
    let checkOut = null; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
    let breakStart = null; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
    const breaks = []; // ‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô entries ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° action
    for (const entry of entries) {
      const t = new Date(entry.timestamp); // ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô Date object

      switch (entry.action) {
        case "checkin":
          checkIn = t; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
          break;
        case "checkout":
          checkOut = t; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
          break;
        case "break_start":
          breakStart = t; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å
          break;
        case "break_end":
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ breakStart ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
          if (breakStart) {
            breaks.push({ start: breakStart, end: t });
            breakStart = null; // reset ‡∏Ñ‡πà‡∏≤
          }
          break;
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0
    if (!checkIn) return "0.00 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á";

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ checkout ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    const now = new Date();
    const end = checkOut || now;

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å (breakStart ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤) ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢
    if (breakStart) {
      breaks.push({ start: breakStart, end });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏° (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡∏ô‡∏≤‡∏ó‡∏µ)
    const totalBreak = breaks.reduce(
      (acc, b) => acc + Math.max(0, (b.end - b.start) / 60000), // ‡πÅ‡∏õ‡∏•‡∏á milliseconds ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
      0
    );

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
    const totalWork = Math.max(0, (end - checkIn) / 60000 - totalBreak);

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
    const hours = Math.floor(totalWork / 60); // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏ï‡πá‡∏°
    const minutes = Math.floor(totalWork % 60); // ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏õ‡∏±‡∏î‡∏•‡∏á)

    // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
    return `${hours}:${minutes.toString().padStart(2, "0")} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
  };

  // useEffect ‡πÅ‡∏£‡∏Å: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ user.id ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    if (!user?.id) return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user id ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î

    const fetchInitialTime = async () => {
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        const data = await getTimeWorkToDay(user.id);
        setEntries(data); // ‡πÄ‡∏Å‡πá‡∏ö entries ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô state

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        const formattedTime = calculateWorkTime(data);
        setTodayHours(formattedTime);
      } catch (err) {
        console.error("Error:", err);
        setTodayHours("0.00 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"); // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏™‡∏î‡∏á 0
      }
    };

    fetchInitialTime();
  }, [user?.id]);

  // useEffect ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö real-time
  useEffect(() => {
    if (entries.length === 0) return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ entries ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î

    // ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ
    const interval = setInterval(() => {
      const formattedTime = calculateWorkTime(entries); // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• entries ‡πÄ‡∏î‡∏¥‡∏°
      setTodayHours(formattedTime); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    }, 60 * 1000); // ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (1 ‡∏ô‡∏≤‡∏ó‡∏µ)

    // ‡∏•‡πâ‡∏≤‡∏á interval ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount ‡∏´‡∏£‡∏∑‡∏≠ entries ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    return () => clearInterval(interval);
  }, [entries]);

  const quickActions = [
    {
      icon: Clock,
      label: "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô",
      system_status: "success",
      action: "/time-tracking",
      color: "from-green-500 to-emerald-600",
    },
    {
      icon: Coffee,
      label: "‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å",
      system_status: "develop",
      action: "",
      color: "from-yellow-500 to-orange-600",
    },
    {
      icon: Home,
      label: "Work From Home",
      system_status: "develop",
      action: "",
      color: "from-blue-500 to-indigo-600",
    },
    {
      icon: Calendar,
      label: "‡∏Ç‡∏≠‡∏•‡∏≤‡∏á‡∏≤‡∏ô",
      system_status: "success",
      action: "/leave-management",
      color: "from-purple-500 to-pink-600",
    },
  ];

  const stats = [
    {
      title: "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
      value: todayHours,
      icon: Clock,
      color: "text-blue-400",
    },
    {
      title: "‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
      value: "12 ‡∏ß‡∏±‡∏ô",
      icon: Calendar,
      color: "text-green-400",
    },
    {
      title: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
      value:
        workStatus === "online"
          ? "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
          : workStatus === "break"
          ? "‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å"
          : "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå",
      icon: Users,
      color: "text-purple-400",
    },
    {
      title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ",
      value: "5/5 ‡∏ß‡∏±‡∏ô",
      icon: CheckCircle,
      color: "text-emerald-400",
    },
  ];

  return (
    <>
      <Helmet>
        <title>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå | ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô</title>
        <meta name="description" content="‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤" />
      </Helmet>

      <Layout>
        <div className="space-y-6">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="text-center space-y-4"
          >
            <h1 className="text-4xl font-bold text-white">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î</h1>
            <div className="glass-effect rounded-lg p-6 max-w-md mx-auto">
              <p className="text-2xl font-mono text-white">
                {currentTime.toLocaleTimeString("th-TH")}
              </p>
              <p className="text-white/70">
                {currentTime.toLocaleDateString("th-TH", {
                  weekday: "long",
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </p>
            </div>
          </motion.div>

          {/* Quick Actions */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <h2 className="text-2xl font-semibold text-white mb-4">
              ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πà‡∏ß‡∏ô
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {quickActions.map((action, index) => {
                const Icon = action.icon;
                return (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                  >
                    <Card
                      className="glass-effect border-white/20 card-hover cursor-pointer"
                      onClick={() =>
                        handleQuickAction(action.system_status, action.action)
                      }
                    >
                      <CardContent className="p-6 text-center">
                        <div
                          className={`w-16 h-16 rounded-full bg-gradient-to-r ${action.color} flex items-center justify-center mx-auto mb-4`}
                        >
                          <Icon className="h-8 w-8 text-white" />
                        </div>
                        <p className="text-white font-semibold">
                          {action.label}
                        </p>
                      </CardContent>
                    </Card>
                  </motion.div>
                );
              })}
            </div>
          </motion.div>

          {/* Stats */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <h2 className="text-2xl font-semibold text-white mb-4">
              ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {stats.map((stat, index) => {
                const Icon = stat.icon;
                return (
                  <motion.div
                    key={stat.title}
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                  >
                    <Card className="glass-effect border-white/20">
                      <CardContent className="p-6">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-white/70 text-sm">
                              {stat.title}
                            </p>
                            <p className="text-2xl font-bold text-white">
                              {stat.value}
                            </p>
                          </div>
                          <Icon className={`h-8 w-8 ${stat.color}`} />
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                );
              })}
            </div>
          </motion.div>

          {/* Recent Activity */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            <Card className="glass-effect border-white/20">
              <CardHeader>
                <CardTitle className="text-white">‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</CardTitle>
                <CardDescription className="text-white/70">
                  ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center space-x-4 p-3 rounded-lg bg-white/5">
                    <div className="w-2 h-2 rounded-full bg-green-400"></div>
                    <div className="flex-1">
                      <p className="text-white">‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00 ‡∏ô.</p>
                      <p className="text-white/70 text-sm">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4 p-3 rounded-lg bg-white/5">
                    <div className="w-2 h-2 rounded-full bg-yellow-400"></div>
                    <div className="flex-1">
                      <p className="text-white">‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ 12:00 ‡∏ô.</p>
                      <p className="text-white/70 text-sm">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4 p-3 rounded-lg bg-white/5">
                    <div className="w-2 h-2 rounded-full bg-blue-400"></div>
                    <div className="flex-1">
                      <p className="text-white">‡∏Ç‡∏≠‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢ 1 ‡∏ß‡∏±‡∏ô</p>
                      <p className="text-white/70 text-sm">
                        ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô - ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
                      </p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </Layout>
    </>
  );
};

export default Dashboard;
